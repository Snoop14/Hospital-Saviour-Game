//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player(s)/Player1_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player1_Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player1_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player1_Input"",
    ""maps"": [
        {
            ""name"": ""Player_Main"",
            ""id"": ""e63cabde-cb52-4416-8adb-eaf601fa8e7d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4566331c-ee61-4d06-a8b6-4e6fa5a1d956"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""cea69f9a-912f-4756-b79d-f20d07bcb7ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ceea1cce-fe3f-4b3d-bda9-d0a9aabdc94f"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""636b7d82-658e-407e-b9d9-2154fb88f752"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9600cfa7-d6ed-437c-a94c-21bbdadff52c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5b4ee3c1-980f-409c-8780-1537609c380c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a2fa5c0d-4111-4cfc-aa4c-ff1b3f14ddea"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c4ed0d0f-f110-4a1b-b2bd-d2b1714e015c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Main
        m_Player_Main = asset.FindActionMap("Player_Main", throwIfNotFound: true);
        m_Player_Main_Movement = m_Player_Main.FindAction("Movement", throwIfNotFound: true);
        m_Player_Main_Interact = m_Player_Main.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Main
    private readonly InputActionMap m_Player_Main;
    private IPlayer_MainActions m_Player_MainActionsCallbackInterface;
    private readonly InputAction m_Player_Main_Movement;
    private readonly InputAction m_Player_Main_Interact;
    public struct Player_MainActions
    {
        private @Player1_Input m_Wrapper;
        public Player_MainActions(@Player1_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Main_Movement;
        public InputAction @Interact => m_Wrapper.m_Player_Main_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Player_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MainActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_MainActions instance)
        {
            if (m_Wrapper.m_Player_MainActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_MainActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_MainActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_MainActionsCallbackInterface.OnMovement;
                @Interact.started -= m_Wrapper.m_Player_MainActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_Player_MainActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_Player_MainActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_Player_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public Player_MainActions @Player_Main => new Player_MainActions(this);
    public interface IPlayer_MainActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
